# --*--coding:UTF-8--*--
# -----------------------------
# File: Deep Q-Learning Algorithm
# Author: Zhaowei Cheng
# Date: 2017.5.21
# -----------------------------

import tensorflow as tf 
import numpy as np 
import random
from collections import deque 

# Hyper Parameters:
FRAME_PER_ACTION = 1
GAMMA = 0.99 # decay rate of past observations
#OBSERVE = 100. # timesteps to observe before training
OBSERVE = 1000. # timesteps to observe before training
#EXPLORE = 200000. # frames over which to anneal epsilon
EXPLORE = 400000000. # frames over which to anneal epsilon
#FINAL_EPSILON = 0#0.001 # final value of epsilon
FINAL_EPSILON = 0.0001#0.001 # final value of epsilon
#INITIAL_EPSILON = 0#0.01 # starting value of epsilon
INITIAL_EPSILON = 0.999#0.01 # starting value of epsilon
REPLAY_MEMORY = 50000 # number of previous transitions to remember
BATCH_SIZE = 32 # size of minibatch
UPDATE_TIME = 100

class BrainDQN:

	def __init__(self,actions):
		# init replay memory
		self.replayMemory = deque()
		# init some parameters
		self.timeStep = 0
		self.epsilon = INITIAL_EPSILON
		self.actions = actions
		# init Q network
		self.stateInput,self.QValue,self.W_fc1,self.b_fc1,self.W_fc2,self.b_fc2,self.W_fc3,self.b_fc3,self.W_fc4,self.b_fc4 = self.createQNetwork()

		# init Target Q Network
		self.stateInputT,self.QValueT,self.W_fc1T,self.b_fc1T,self.W_fc2T,self.b_fc2T,self.W_fc3T,self.b_fc3T,self.W_fc4T,self.b_fc4T= self.createQNetwork()

		self.copyTargetQNetworkOperation = [self.W_fc1T.assign(self.W_fc1),self.b_fc1T.assign(self.b_fc1),self.W_fc2T.assign(self.W_fc2),self.b_fc2T.assign(self.b_fc2),self.W_fc3T.assign(self.W_fc3),self.b_fc3T.assign(self.b_fc3),self.W_fc4T.assign(self.W_fc4),self.b_fc4T.assign(self.b_fc4)]

		self.createTrainingMethod()

		# saving and loading networks
		self.saver = tf.train.Saver()
		self.session = tf.InteractiveSession()
		self.session.run(tf.initialize_all_variables())
		checkpoint = tf.train.get_checkpoint_state("saved_networks")
		if checkpoint and checkpoint.model_checkpoint_path:
				self.saver.restore(self.session, checkpoint.model_checkpoint_path)
				print "Successfully loaded:", checkpoint.model_checkpoint_path
		else:
				print "Could not find old network weights"


	def createQNetwork(self):
		# network weights

		W_fc1 = self.weight_variable([30,90])
		b_fc1 = self.bias_variable([90])

		W_fc2 = self.weight_variable([90, 60])
		b_fc2 = self.bias_variable([60])

		W_fc3 = self.weight_variable([60, 15])
		b_fc3 = self.bias_variable([15])

		W_fc4 = self.weight_variable([15,self.actions])
		b_fc4 = self.bias_variable([self.actions])

		# input layer

		#stateInput = tf.placeholder("float",[None,80,80,4])
		stateInput = tf.placeholder("float", (None,30))

		# hidden layers
		h_fc1 = tf.nn.relu(tf.matmul(stateInput,W_fc1) + b_fc1)
		h_fc2 = tf.nn.relu(tf.matmul(h_fc1, W_fc2) + b_fc2)
		h_fc3 = tf.nn.relu(tf.matmul(h_fc2, W_fc3) + b_fc3)

		# Q Value layer
		QValue = tf.matmul(h_fc3,W_fc4) + b_fc4

		return stateInput,QValue,W_fc1,b_fc1,W_fc2,b_fc2,W_fc3,b_fc3,W_fc4,b_fc4

	def copyTargetQNetwork(self):
		self.session.run(self.copyTargetQNetworkOperation)

	def createTrainingMethod(self):
		self.actionInput = tf.placeholder("float",[None,self.actions])
		self.yInput = tf.placeholder("float", [None]) 
		Q_Action = tf.reduce_sum(tf.multiply(self.QValue, self.actionInput), reduction_indices = 1)
		self.cost = tf.reduce_mean(tf.square(self.yInput - Q_Action))
		self.trainStep = tf.train.AdamOptimizer(1e-6).minimize(self.cost)


	def trainQNetwork(self):

		
		# Step 1: obtain random minibatch from replay memory
		minibatch = random.sample(self.replayMemory,BATCH_SIZE)
		state_batch = [data[0] for data in minibatch]
		action_batch = [data[1] for data in minibatch]
		reward_batch = [data[2] for data in minibatch]
		nextState_batch = [data[3] for data in minibatch]

		# Step 2: calculate y 
		y_batch = []
		QValue_batch = self.QValueT.eval(feed_dict={self.stateInputT:nextState_batch})
		for i in range(0,BATCH_SIZE):
			terminal = minibatch[i][4]
			if terminal:
				y_batch.append(reward_batch[i])
			else:
				y_batch.append(reward_batch[i] + GAMMA * np.max(QValue_batch[i]))

		self.trainStep.run(feed_dict={
			self.yInput : y_batch,
			self.actionInput : action_batch,
			self.stateInput : state_batch
			})

		# save network every 100000 iteration
		#if self.timeStep % 10000 == 0:
		if self.timeStep % 3000 == 0:
			self.saver.save(self.session, 'saved_networks/' + 'network' + '-dqn', global_step = self.timeStep/3000)
			#self.saver.save(self.session, 'saved_networks/' + 'network' + '-dqn', global_step=self.timeStep)
		if self.timeStep % UPDATE_TIME == 0:
			self.copyTargetQNetwork()

		
	def setPerception(self,nextObservation,action,reward,terminal):
		#newState = np.append(nextObservation,self.currentState[:,:,1:],axis = 2)
		#newState = np.append(self.currentState[:,:,1:],nextObservation,axis = 2)
		newState = nextObservation
		self.replayMemory.append((self.currentState,action,reward,newState,terminal))
		if len(self.replayMemory) > REPLAY_MEMORY:
			self.replayMemory.popleft()
		if self.timeStep > OBSERVE:
			# Train the network
			#print(self.replayMemory)
			self.trainQNetwork()

		# print info
		state = ""
		if self.timeStep <= OBSERVE:
			state = "observe"
		elif self.timeStep > OBSERVE and self.timeStep <= OBSERVE + EXPLORE:
			state = "explore"
		else:
			state = "train"

		#print "TIMESTEP", self.timeStep, "/ STATE", state, \
         #   "/ EPSILON", self.epsilon

		self.currentState = newState
		self.timeStep += 1

	def getAction(self,action_p,ep,pst):
		QValue = self.QValue.eval(feed_dict= {self.stateInput:[self.currentState]})[0]
		#action = np.zeros(self.actions)
		action = np.zeros(4)
		action_index = 0
		#a=random.random()
		a=0

		if self.timeStep % FRAME_PER_ACTION == 0:
			if  a<= self.epsilon:
				if ep%3000==0:
					with open("output_epsiodes.txt", "a+") as f:
						print>>f,1,"ep",ep
				#action_index = random.randrange(self.actions-1)
				#action[action_index] = 1
				action_index = random.randint(0, 3)
				#在敌我双方敌人一方将死的瞬间，getAction下标出界，因此加入异常处理机制
				try:
					action_attack_index = random.randint(0, len(pst['units_enemy'])-1)
					if  action_p[0] > 0:
						action[0] = 1.0
						action[1] = 0
						action[2] = 0
						action[3] = action_attack_index
					else:
						action[0] = -1.0
						action[1] = action_index * 90
						action[2] = 16
						action[3] = action_attack_index
				except:
					action[0] = 1  # move
					action[1] = 0
					action[2] = 0
					action[3] = 0
			else:

				action_index = np.argmax(QValue)
				if ep%3000==0:
					with open("output_epsiodes.txt", "a+") as f:
						print>>f,2
						print>>f,"QValue",QValue,"action_index",action_index,"random.random",a,"epsilon",self.epsilon,"ep",ep
				if action_index==0:
					action[0] = 1.0
					action[1] = 0
					action[2] = 0
					action[3] = 0
				elif action_index==1:
					action[0] = 1.0
					action[1] = 0
					action[2] = 0
					action[3] = 1
				elif action_index==2:
					action[0] = 1.0
					action[1] = 0
					action[2] = 0
					action[3] = 2
				elif action_index==3:
					action[0] = -1.0
					action[1] = 0
					action[2] = 16
					action[3] = 0
				elif action_index==4:
					action[0] = -1.0
					action[1] = 90
					action[2] = 16
					action[3] = 0
				elif action_index==5:
					action[0] = -1.0
					action[1] = 180
					action[2] = 16
					action[3] = 0
				else:
					action[0] = -1.0
					action[1] = 270
					action[2] = 16
					action[3] = 0
		else:
			action[0] = 1 # move
			action[1] = 0
			action[2] = 0
			action[3] = 0
		# change episilon
		if self.epsilon > FINAL_EPSILON and self.timeStep > OBSERVE:
			self.epsilon -= (INITIAL_EPSILON - FINAL_EPSILON)/EXPLORE

		return action

	def getActionForTest(self,currentState):
		QValue = self.QValue.eval(feed_dict={self.stateInput: [currentState]})[0]
		action=np.zeros(4)
		action_index = np.argmax(QValue)
		if action_index == 0:
			action[0] = 1.0
			action[1] = 0
			action[2] = 0
			action[3] = 0
		elif action_index == 1:
			action[0] = 1.0
			action[1] = 0
			action[2] = 0
			action[3] = 1
		elif action_index == 2:
			action[0] = 1.0
			action[1] = 0
			action[2] = 0
			action[3] = 2
		elif action_index == 3:
			action[0] = -1.0
			action[1] = 0
			action[2] = 16
			action[3] = 0
		elif action_index == 4:
			action[0] = -1.0
			action[1] = 90
			action[2] = 16
			action[3] = 0
		elif action_index == 5:
			action[0] = -1.0
			action[1] = 180
			action[2] = 16
			action[3] = 0
		else:
			action[0] = -1.0
			action[1] = 270
			action[2] = 16
			action[3] = 0
		return action

	def setInitState(self,observation):
		#self.currentState = np.stack((observation, observation, observation, observation), axis = 2)
		self.currentState = observation

	def weight_variable(self,shape):
		initial = tf.truncated_normal(shape, stddev = 0.01)
		return tf.Variable(initial)

	def bias_variable(self,shape):
		initial = tf.constant(0.01, shape = shape)
		return tf.Variable(initial)

	def conv2d(self,x, W, stride):
		return tf.nn.conv2d(x, W, strides = [1, stride, stride, 1], padding = "SAME")

	def max_pool_2x2(self,x):
		return tf.nn.max_pool(x, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = "SAME")
		
